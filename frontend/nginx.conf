server { 
    listen 80; 
    server_name 192.169.100.22;
 
    # Root (build de la app React) 
    root /usr/share/nginx/html; 
    index index.html index.htm; 
 
    # Compression 
    gzip on; 
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml text/javascript; 
 
    # Security headers 
    add_header X-Frame-Options "SAMEORIGIN" always; 
    add_header X-XSS-Protection "1; mode=block" always; 
    add_header X-Content-Type-Options "nosniff" always; 
    add_header Referrer-Policy "strict-origin-when-cross-origin" always; 
    
    # CSP deshabilitado temporalmente para debugging de PostHog
    # Cuando funcione todo, descomenta y ajusta según necesites
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://us-assets.i.posthog.com https://app.posthog.com; style-src 'self' 'unsafe-inline'; connect-src 'self' ws: wss: http://backend:8000 https://us-assets.i.posthog.com https://app.posthog.com; img-src 'self' data: https:; font-src 'self' data:;" always; 
 
    # Serve frontend (SPA) 
    location / { 
        try_files $uri $uri/ /index.html; 
        add_header Cache-Control "no-cache" always; 
    } 
 
    # Static assets caching 
    location ~* \.(?:css|js|jpg|jpeg|gif|png|svg|ico|ttf|woff|woff2|eot)$ { 
        try_files $uri =404; 
        expires 7d; 
        add_header Cache-Control "public, immutable"; 
    } 
 
    # WebSocket - IMPORTANTE: usar nombre del servicio 'backend'
    location /ws { 
        proxy_pass http://backend:8000; 
        proxy_http_version 1.1; 
        proxy_set_header Upgrade $http_upgrade; 
        proxy_set_header Connection "upgrade"; 
        proxy_set_header Host $host; 
        proxy_read_timeout 300s; 
    } 
 
    # API - CRÍTICO: usar nombre del servicio 'backend' y SIN /api al final
    location /api/ { 
        proxy_pass http://backend:8000;  # ← Nombre del servicio, NO localhost
        proxy_http_version 1.1; 
        proxy_set_header Host $host; 
        proxy_set_header X-Real-IP $remote_addr; 
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; 
        proxy_set_header X-Forwarded-Proto $scheme; 
 
        # CORS headers
        add_header 'Access-Control-Allow-Origin' '*' always; 
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always; 
        add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type,X-Requested-With' always; 
        add_header 'Access-Control-Allow-Credentials' 'true' always; 
 
        # Preflight OPTIONS handling
        if ($request_method = OPTIONS) { 
            add_header 'Access-Control-Allow-Origin' '*' always; 
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always; 
            add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type,X-Requested-With' always; 
            add_header 'Access-Control-Allow-Credentials' 'true' always; 
            add_header 'Access-Control-Max-Age' 1728000; 
            add_header 'Content-Length' 0; 
            add_header 'Content-Type' 'text/plain charset=UTF-8'; 
            return 204; 
        } 
    } 
 
    # Healthcheck 
    location = /health { 
        proxy_pass http://backend:8000/health; 
        proxy_http_version 1.1; 
        proxy_set_header Host $host; 
        proxy_set_header X-Real-IP $remote_addr; 
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; 
    } 
}